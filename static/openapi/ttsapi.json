{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "TTS (Text-to-Speech) and Avatar API",
    "description": "This REST API provides resources for generating speech or avatar video from text or pre-signed URLs."
  },
  "servers": [
    {
      "url": "https://audio-video-api.adobe.io/v1",
      "description": "Production environment - GA"
    },
    {
      "url": "https://audio-video-api-stage.adobe.io/v1",
      "description": "Staging environment - GA"
    }
  ],
  "security": [
    {
      "AccessToken": [],
      "X-Api-Key": []
    }
  ],
  "paths": {
    "/voices": {
      "get": {
        "summary": "Get available voices",
        "description": "This endpoint provides the list of all available voices for the user's enterprise.",
        "operationId": "voices",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulVoicesResponse"
                },
                "examples": {
                  "Success": {
                    "$ref": "#/components/examples/SuccessfulVoicesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyUnauthorized": {
                    "$ref": "#/components/examples/ErrorBodyUnauthorised"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyForbidden": {
                    "$ref": "#/components/examples/ErrorBodyForbidden"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyTooManyRequests": {
                    "$ref": "#/components/examples/ErrorBodyTooManyRequests"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "RunTimeErrorInStudio": {
                    "$ref": "#/components/examples/RunTimeError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/avatars": {
      "get": {
        "summary": "Get available avatars",
        "description": "This endpoint provides the list of all available avatars for the user's enterprise.",
        "operationId": "avatars",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulAvatarsResponse"
                },
                "examples": {
                  "Success": {
                    "$ref": "#/components/examples/SuccessfulAvatarsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyUnauthorized": {
                    "$ref": "#/components/examples/ErrorBodyUnauthorised"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyForbidden": {
                    "$ref": "#/components/examples/ErrorBodyForbidden"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyTooManyRequests": {
                    "$ref": "#/components/examples/ErrorBodyTooManyRequests"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "RunTimeErrorInStudio": {
                    "$ref": "#/components/examples/RunTimeError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/generate-speech" : {
      "post" : {
        "summary" : "Generate speech from text",
        "description" : "This endpoint generates speech from a transcript. You can provide the transcript either as plain text or a pre-signed URL. The response will include a job ID and a status URL for tracking the job.",
        "operationId" : "generate-speech",
        "requestBody" : {
          "description" : "The request body contains the transcript used for generating speech.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TTSRequest"
              },
              "examples" : {
                "TextInputForSpeechGeneration" : {
                  "$ref" : "#/components/examples/TextInputForSpeechGeneration"
                },
                "URLInputForSpeechGeneration" : {
                  "$ref" : "#/components/examples/URLInputForSpeechGeneration"
                }
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubmitAPIResponse"
                },
                "examples" : {
                  "SubmitRequestResponse" : {
                    "$ref" : "#/components/examples/SubmitRequestResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "BadRequestError" : {
                    "$ref" : "#/components/examples/BadRequestError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "UnauthorizedAccessError" : {
                    "$ref" : "#/components/examples/ErrorBodyUnauthorised"
                  },
                  "ErrorBodyAccessDenied": {
                    "$ref" : "#/components/examples/ErrorBodyAccessDenied"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyForbidden" : {
                    "$ref" : "#/components/examples/ErrorBodyForbidden"
                  },
                  "UserNotEntitledError": {
                    "$ref": "#/components/examples/UserNotEntitledError"
                  },
                  "QuotaExceededError" : {
                    "$ref" : "#/components/examples/QuotaExceededError"
                  },
                  "UserProfileDeniedError": {
                    "$ref": "#/components/examples/UserProfileDeniedError"
                  },
                  "UserBlockedError" : {
                    "$ref" : "#/components/examples/UserBlockedError"
                  },
                  "InvalidSubscriptionError": {
                    "$ref": "#/components/examples/InvalidSubscriptionError"
                  },
                  "ViolationError" : {
                    "$ref" : "#/components/examples/ViolationError"
                  },
                  "TasteExhaustedError": {
                    "$ref": "#/components/examples/TasteExhaustedError"
                  },
                  "AccessError": {
                    "$ref": "#/components/examples/AccessError"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "UserBKSFailedErrorExample" : {
                    "$ref" : "#/components/examples/UserBKSFailedErrorExample"
                  },
                  "InvalidInputErrorExample" : {
                    "$ref" : "#/components/examples/InvalidInputErrorExample"
                  },
                  "MissingInputFileUrlErrorExample" : {
                    "$ref" : "#/components/examples/MissingInputFileUrlErrorExample"
                  },
                  "InvalidInputUrlErrorExample" : {
                    "$ref" : "#/components/examples/InvalidInputUrlErrorExample"
                  },
                  "InputFileFormatValidationErrorExample" : {
                    "$ref" : "#/components/examples/InputFileFormatValidationErrorExample"
                  },
                  "MissingScriptErrorExample" : {
                    "$ref" : "#/components/examples/MissingScriptErrorExample"
                  },
                  "EmptyTextForScriptErrorExample" : {
                    "$ref" : "#/components/examples/EmptyTextForScriptErrorExample"
                  },
                  "TextLengthExceededForScriptErrorExample" : {
                    "$ref" : "#/components/examples/TextLengthExceededForScriptErrorExample"
                  },
                  "TextLengthSubceededForScriptErrorExample" : {
                    "$ref" : "#/components/examples/TextLengthSubceededForScriptErrorExample"
                  },
                  "ScriptInvalidASCIIRange" : {
                    "$ref" : "#/components/examples/ScriptInvalidASCIIRange"
                  },
                  "ScriptInvalidTextSupportedRange" : {
                    "$ref" : "#/components/examples/ScriptInvalidTextSupportedRange"
                  },
                  "InvalidOrMissingLocaleCodeForScriptErrorExample" : {
                    "$ref" : "#/components/examples/InvalidOrMissingLocaleCodeForScriptErrorExample"
                  },
                  "MissingMediaTypeForScriptErrorExample" : {
                    "$ref" : "#/components/examples/MissingMediaTypeForScriptErrorExample"
                  },
                  "MediatypeIncomatibleForText" : {
                    "$ref" : "#/components/examples/MediatypeIncomatibleForText"
                  },
                  "MissingSourceLocaleErrorExample" : {
                    "$ref" : "#/components/examples/MissingSourceLocaleErrorExample"
                  },
                  "SourceUrlSourceTextConflictErrorExample" : {
                    "$ref" : "#/components/examples/SourceUrlSourceTextConflictErrorExample"
                  },
                  "UnsupportedVoiceIdErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedVoiceIdErrorExample"
                  },
                  "MissingVoiceIdErrorExample" : {
                    "$ref" : "#/components/examples/MissingVoiceIdErrorExample"
                  },
                  "MissingOutputErrorExample" : {
                    "$ref" : "#/components/examples/MissingOutputErrorExample"
                  },
                  "MissingMediaTypeForOutputErrorExample" : {
                    "$ref" : "#/components/examples/MissingMediaTypeForOutputErrorExample"
                  },
                  "InvalidOutputFileFormatErrorExample" : {
                    "$ref" : "#/components/examples/InvalidOutputFileFormatErrorExample"
                  },
                  "InvalidRequestPayloadErrorExample" : {
                    "$ref" : "#/components/examples/InvalidRequestPayloadErrorExample"
                  },
                  "InvalidSourceUrlErrorExample" : {
                    "$ref" : "#/components/examples/InvalidSourceUrlErrorExample"
                  },
                  "IncorrectVoiceNameErrorExample" : {
                    "$ref" : "#/components/examples/IncorrectVoiceNameErrorExample"
                  }
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyTooManyRequests" : {
                    "$ref" : "#/components/examples/ErrorBodyTooManyRequests"
                  },
                  "ErrorBodyRateLimited": {
                    "$ref" : "#/components/examples/ErrorBodyRateLimited"
                  }
                }
              }
            }
          },
          "451" : {
            "description" : "Unavailable For Legal Reasons",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyLegalReasons" : {
                    "$ref" : "#/components/examples/ErrorBodyLegalReasons"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "TTSServiceSubmitError" : {
                    "$ref" : "#/components/examples/TTSServiceSubmitError"
                  },
                  "TTSEntityCreationError" : {
                    "$ref" : "#/components/examples/TTSEntityCreationError"
                  },
                  "TTSRuntimeError" : {
                    "$ref" : "#/components/examples/TTSRuntimeError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/generate-avatar" : {
      "post" : {
        "summary" : "Generate avatar video from text",
        "description" : "This endpoint generates an avatar video from a transcript. You can provide the transcript either as plain text or a pre-signed URL. The response will include a job ID and a status URL for tracking the job.",
        "operationId" : "generate-avatar",
        "requestBody" : {
          "description" : "The request body contains the transcript and details for generating an avatar.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AvatarRequest"
              },
              "examples" : {
                "PlainTextInputForAvatarGeneration" : {
                  "$ref" : "#/components/examples/PlainTextInputForAvatarGeneration"
                },
                "PlainTextInputForAvatarGenerationUsingVideoBackground" : {
                  "$ref" : "#/components/examples/PlainTextInputForAvatarGenerationUsingVideoBackground"
                },
                "PlainTextInputForAvatarGenerationUsingImageBackground" : {
                  "$ref" : "#/components/examples/PlainTextInputForAvatarGenerationUsingImageBackground"
                },
                "PlainTextInputForAvatarGenerationUsingColorBackground" : {
                  "$ref" : "#/components/examples/PlainTextInputForAvatarGenerationUsingColorBackground"
                },
                "URLTextInputForAvatarGeneration" : {
                  "$ref" : "#/components/examples/URLTextInputForAvatarGeneration"
                },
                "URLInputForAvatarGeneration" : {
                  "$ref" : "#/components/examples/URLInputForAvatarGeneration"
                }
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubmitAPIResponse"
                },
                "examples" : {
                  "SubmitRequestResponse" : {
                    "$ref" : "#/components/examples/SubmitRequestResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "BadRequestError" : {
                    "$ref" : "#/components/examples/BadRequestError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "UnauthorizedAccessError" : {
                    "$ref" : "#/components/examples/ErrorBodyUnauthorised"
                  },
                  "ErrorBodyAccessDenied": {
                    "$ref" : "#/components/examples/ErrorBodyAccessDenied"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyForbidden" : {
                    "$ref" : "#/components/examples/ErrorBodyForbidden"
                  },
                  "UserNotEntitledError": {
                    "$ref": "#/components/examples/UserNotEntitledError"
                  },
                  "QuotaExceededError" : {
                    "$ref" : "#/components/examples/QuotaExceededError"
                  },
                  "UserProfileDeniedError": {
                    "$ref": "#/components/examples/UserProfileDeniedError"
                  },
                  "UserBlockedError" : {
                    "$ref" : "#/components/examples/UserBlockedError"
                  },
                  "InvalidSubscriptionError": {
                    "$ref": "#/components/examples/InvalidSubscriptionError"
                  },
                  "ViolationError" : {
                    "$ref" : "#/components/examples/ViolationError"
                  },
                  "TasteExhaustedError": {
                    "$ref": "#/components/examples/TasteExhaustedError"
                  },
                  "AccessError": {
                    "$ref": "#/components/examples/AccessError"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "UserBKSFailedErrorExample" : {
                    "$ref" : "#/components/examples/UserBKSFailedErrorExample"
                  },
                  "InvalidInputErrorExample" : {
                    "$ref" : "#/components/examples/InvalidInputErrorExample"
                  },
                  "MissingInputFileUrlErrorExample" : {
                    "$ref" : "#/components/examples/MissingInputFileUrlErrorExample"
                  },
                  "InvalidInputUrlErrorExample" : {
                    "$ref" : "#/components/examples/InvalidInputUrlErrorExample"
                  },
                  "InputFileFormatValidationErrorExample" : {
                    "$ref" : "#/components/examples/InputFileFormatValidationErrorExample"
                  },
                  "MissingScriptErrorExample" : {
                    "$ref" : "#/components/examples/MissingScriptErrorExample"
                  },
                  "EmptyTextForScriptErrorExample" : {
                    "$ref" : "#/components/examples/EmptyTextForScriptErrorExample"
                  },
                  "TextLengthExceededForScriptErrorExample" : {
                    "$ref" : "#/components/examples/TextLengthExceededForScriptErrorExample"
                  },
                  "TextLengthSubceededForScriptErrorExample" : {
                    "$ref" : "#/components/examples/TextLengthSubceededForScriptErrorExample"
                  },
                  "ScriptInvalidASCIIRange" : {
                    "$ref" : "#/components/examples/ScriptInvalidASCIIRange"
                  },
                  "ScriptInvalidTextSupportedRange" : {
                    "$ref" : "#/components/examples/ScriptInvalidTextSupportedRange"
                  },
                  "InvalidOrMissingLocaleCodeForScriptErrorExample" : {
                    "$ref" : "#/components/examples/InvalidOrMissingLocaleCodeForScriptErrorExample"
                  },
                  "MissingMediaTypeForScriptErrorExample" : {
                    "$ref" : "#/components/examples/MissingMediaTypeForScriptErrorExample"
                  },
                  "MediatypeIncomatibleForText" : {
                    "$ref" : "#/components/examples/MediatypeIncomatibleForText"
                  },
                  "MissingSourceLocaleErrorExample" : {
                    "$ref" : "#/components/examples/MissingSourceLocaleErrorExample"
                  },
                  "SourceUrlSourceTextConflictErrorExample" : {
                    "$ref" : "#/components/examples/SourceUrlSourceTextConflictErrorExample"
                  },
                  "UnsupportedVoiceIdErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedVoiceIdErrorExample"
                  },
                  "MissingVoiceIdErrorExample" : {
                    "$ref" : "#/components/examples/MissingVoiceIdErrorExample"
                  },
                  "MissingOutputErrorExample" : {
                    "$ref" : "#/components/examples/MissingOutputErrorExample"
                  },
                  "MissingMediaTypeForOutputErrorExample" : {
                    "$ref" : "#/components/examples/MissingMediaTypeForOutputErrorExample"
                  },
                  "InvalidOutputFileFormatErrorExample" : {
                    "$ref" : "#/components/examples/InvalidOutputFileFormatErrorExample"
                  },
                  "InvalidRequestPayloadErrorExample" : {
                    "$ref" : "#/components/examples/InvalidRequestPayloadErrorExample"
                  },
                  "InputScriptAudioConflictErrorExample" : {
                    "$ref" : "#/components/examples/InputScriptAudioConflictErrorExample"
                  },
                  "InputScriptAudioMissingErrorExample" : {
                    "$ref" : "#/components/examples/InputScriptAudioMissingErrorExample"
                  },
                  "InputScriptAudioMissingOrInvalidErrorExample" : {
                    "$ref" : "#/components/examples/InputScriptAudioMissingOrInvalidErrorExample"
                  },
                  "InvalidOrMissingAudioUrlErrorExample" : {
                    "$ref" : "#/components/examples/InvalidOrMissingAudioUrlErrorExample"
                  },
                  "MissingAudioSourceErrorExample" : {
                    "$ref" : "#/components/examples/MissingAudioSourceErrorExample"
                  },
                  "MissingAvatarIdErrorExample" : {
                    "$ref" : "#/components/examples/MissingAvatarIdErrorExample"
                  },
                  "UnsupportedAvatarIdErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedAvatarIdErrorExample"
                  },
                  "MissingBackgroundUrlErrorExample" : {
                    "$ref" : "#/components/examples/MissingBackgroundUrlErrorExample"
                  },
                  "MissingBackgroundTypeErrorExample" : {
                    "$ref" : "#/components/examples/MissingBackgroundTypeErrorExample"
                  },
                  "InvalidBackgroundUrlErrorExample" : {
                    "$ref" : "#/components/examples/InvalidBackgroundUrlErrorExample"
                  },
                  "BackgroundSourceColorConflictErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundSourceColorConflictErrorExample"
                  },
                  "BackgroundSourceColorMissingErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundSourceColorMissingErrorExample"
                  },
                  "InvalidBackgroundColorErrorExample" : {
                    "$ref" : "#/components/examples/InvalidBackgroundColorErrorExample"
                  },
                  "MissingBackgroundColorErrorExample" : {
                    "$ref" : "#/components/examples/MissingBackgroundColorErrorExample"
                  },
                  "BackgroundIncompatibleWithFormat" : {
                    "$ref" : "#/components/examples/BackgroundIncompatibleWithFormat"
                  },
                  "FormatIncompatibleWithBackground" : {
                    "$ref" : "#/components/examples/FormatIncompatibleWithBackground"
                  },
                  "UnsupportedOutputResolution" : {
                    "$ref" : "#/components/examples/UnsupportedOutputResolution"
                  },
                  "UnsupportedShotTypeErrorExample": {
                    "$ref" : "#/components/examples/UnsupportedShotTypeErrorExample"
                  },
                  "InvalidSourceUrlErrorExample" : {
                    "$ref" : "#/components/examples/InvalidSourceUrlErrorExample"
                  },
                  "IncorrectVoiceNameErrorExample" : {
                    "$ref" : "#/components/examples/IncorrectVoiceNameErrorExample"
                  }
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyTooManyRequests" : {
                    "$ref" : "#/components/examples/ErrorBodyTooManyRequests"
                  },
                  "ErrorBodyRateLimited": {
                    "$ref" : "#/components/examples/ErrorBodyRateLimited"
                  }
                }
              }
            }
          },
          "451" : {
            "description" : "Unavailable For Legal Reasons",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyLegalReasons" : {
                    "$ref" : "#/components/examples/ErrorBodyLegalReasons"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "TTSServiceSubmitError" : {
                    "$ref" : "#/components/examples/TTSServiceSubmitError"
                  },
                  "TTSEntityCreationError" : {
                    "$ref" : "#/components/examples/TTSEntityCreationError"
                  },
                  "TTSRuntimeError" : {
                    "$ref" : "#/components/examples/TTSRuntimeError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/status/{jobId}" : {
      "get" : {
        "summary" : "Get the status of a job",
        "description" : "Provides the status and result of an asynchronous TTS and Avatar job. <br></br> Use this endpoint with the stage environment URL for stage enviornment status and results.",
        "operationId" : "status",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "description" : "The job ID of an asynchronous TTS and Avatar job.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusAPIResponse"
                },
                "examples" : {
                  "StatusAPIInprogressRequestResponse" : {
                    "$ref" : "#/components/examples/StatusApiInProgressRequestResponse"
                  },
                  "StatusAPISuccessRequestResponse" : {
                    "$ref" : "#/components/examples/StatusApiSuccessRequestResponse"
                  },
                  "StatusAPIFailedInputFileDownloadResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedInputFileDownloadResponse"
                  },
                  "StatusAPIFailedUnsafeScriptResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedUnsafeScriptResponse"
                  },
                  "StatusAPIFailedBackgroundFileResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedBackgroundFileResponse"
                  },
                  "StatusAPIFailedMediatypeMismatchResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedMediatypeMismatchResponse"
                  },
                  "StatusAPIFailedUnsupportedBackgroundResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedUnsupportedBackgroundResponse"
                  },
                  "StatusAPIFailedBackgroundResulutionMismatchResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedBackgroundResulutionMismatchResponse"
                  },
                  "StatusAPIFailedDurationTooLongResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedDurationTooLongResponse"
                  },
                  "StatusAPIFailedCAISigningResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedCAISigningResponse"
                  },
                  "StatusAPIFailedUploadErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedUploadErrorResponse"
                  },
                  "StatusAPIFailedDownloadErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedDownloadErrorResponse"
                  },
                  "StatusAPIFailedTTSErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedTTSErrorResponse"
                  },
                  "StatusAPIFailedAvatarErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedAvatarErrorResponse"
                  },
                  "StatusAPIFailedLipsyncErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedLipsyncErrorResponse"
                  },
                  "StatusAPIFailedFFMpegErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedFFMpegErrorResponse"
                  },
                  "StatusAPIFailedLipsyncPollingErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedLipsyncPollingErrorResponse"
                  },
                  "StatusAPIFailedMediaTrimErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedMediaTrimErrorResponse"
                  },
                  "StatusAPIFailedMediaTrimAlphaErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedMediaTrimAlphaErrorResponse"
                  },
                  "StatusAPIFailedConfigDownloadResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedConfigDownloadResponse"
                  },
                  "StatusAPIFailedInternalErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedInternalErrorResponse"
                  },
                  "StatusAPIFailedTTSInternalErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedTTSInternalErrorResponse"
                  },
                  "StatusAPIFailedEntitiesErrorResponse": {
                    "$ref" : "#/components/examples/StatusAPIFailedEntitiesErrorResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyUnauthorised" : {
                    "$ref" : "#/components/examples/ErrorBodyUnauthorised"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyForbidden" : {
                    "$ref" : "#/components/examples/ErrorBodyForbidden"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyResourceNotFound" : {
                    "$ref": "#/components/examples/ErrorBodyResourceNotFound"
                  }
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyTooManyRequests" : {
                    "$ref" : "#/components/examples/ErrorBodyTooManyRequests"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "RunTimeError": {
                    "$ref" : "#/components/examples/RunTimeError"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "AccessToken": {
        "type": "http",
        "scheme": "bearer"
      },
      "X-Api-Key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "SuccessfulVoicesResponse": {
        "type": "object",
        "description" : "List of available voices.",
        "properties": {
          "voices": {
            "type": "array",
            "items" : {"$ref" : "#/components/schemas/VoiceEntity"}

          }
        }
      },
      "VoiceEntity" : {
        "type" : "object",
        "description" : "Details of Voice Entity.",
        "properties": {
          "voiceId": {
            "type": "string",
            "description": "The unique ID for the voice."
          },
          "displayName": {
            "type": "string",
            "description": "The displayed name for the voice."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the voice."
          },
          "style": {
            "type": "string",
            "description": "The speaking style of the voice.",
            "enum": ["Casual", "Excited"]
          },
          "voiceType": {
            "type": "string",
            "description": "Not applicable at this time."
          },
          "status": {
            "type": "string",
            "description": "This determines if the specific voice ID is available for use. Deprecated voices will have an Inactive status.",
            "enum": ["Active", "Inactive"]
          },
          "extendedPropertyMap": {
            "type": "object",
            "description": "This is a field for any additional properties for the voice."

          },
          "wordsPerMinute": {
            "type": "string",
            "description": "The speed of speaking, in words per minute."
          },
          "rolePlayList": {
            "type": "array",
            "description": "Not applicable at this time.",
            "items": {
              "type": "string"
            }
          },
          "sampleURL": {
            "type": "string",
            "description": "A pre-signed URL for downloading the sample audio."
          }
        }
      },
      "SuccessfulAvatarsResponse": {
        "type": "object",
        "description" : "List of available avatars.",
        "properties": {
          "avatars": {
            "type" : "array",
            "items":{"$ref" : "#/components/schemas/AvatarEntity"}

          }
        }
      },
      "AvatarEntity": {
        "type" : "object",
        "description" : "Details of the avatar entity.",
        "properties": {
          "avatarId": {
            "type": "string",
            "description": "The unique ID for the avatar."
          },
          "displayName": {
            "type": "string",
            "description": "The displayed name for the avatar."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the avatar."
          },
          "clothingStyle": {
            "type": "string",
            "description": "The clothing style worn by the avatar.",
            "enum": ["Casual", "Formal", "Professional"]
          },
          "ageGroup": {
            "type": "string",
            "description": "The intended age bracket of the avatar.",
            "enum": ["Young Adult", "Middle Aged", "Senior"]
          },
          "ethnicity": {
            "type": "string",
            "description": "The ethnicity of the avatar."
          },
          "style": {
            "type": "string",
            "description": "This property is used when the avatar wears a professional or region-specific costume (like Nurse, Doctor, Emergency Worker, Retail Worker, etc.)."
          },
          "status": {
            "type": "string",
            "description": "This determines if the specific avatar ID is available for use. Deprecated avatars will have an Inactive status.",
            "enum": ["Active", "Inactive"]
          },
          "extendedPropertyMap": {
            "type": "object",
            "description": "This is a field for any additional properties for the avatar."
          },
          "thumbnailUrls": {
            "type": "object",
            "properties": {
              "hd" : {
                "type": "string",
                "description": "A pre-signed URL for downloading the high-resolution avatar thumbnail."
              },
              "lowRes" : {
                "type": "string",
                "description": "A pre-signed URL for downloading the low-resolution avatar thumbnail."
              }
            }

          },
          "voiceId": {
            "type": "string",
            "description": "The unique ID for the voice."
          },
          "sampleVideo": {
            "type": "object",
            "properties": {
              "webm": {
                "type": "string",
                "description": "A pre-signed URL for downloading avatar sample video in WEBM format."
              },
              "mp4": {
                "type": "string",
                "description": "A pre-signed URL for downloading avatar sample video in MP4 format."
              }
            }
          }
        }
      },
      "SupportedLanguageCode" : {
        "type" : "string",
        "enum" : ["en-US", "es-ES", "de-DE", "fr-FR", "da-DK", "en-GB", "en-IN", "es-419", "es-AR", "fr-CA", "hi-IN",
          "it-IT", "ja-JP", "ko-KR", "nb-NO", "pt-BR", "pt-PT", "nl-NL", "zh-CN", "sv-SE"],
        "description": "The language code for the supported language desired in the result."
      },
      "SupportedAudioOutputAudioFormat" : {
        "type" : "string",
        "enum" : [ "audio/wav"],
        "description": "The supported audio format for output."
      },
      "SupportedOutputVideoFormat" : {
        "type" : "string",
        "enum" : [ "video/mp4", "video/webm" ],
        "description": "The supported video format for background video for Avatar."
      },
      "SupportedBackgroundType" : {
        "type" : "string",
        "enum" : [ "color", "video", "image", "transparent" ],
        "description" : "Supported background type for output Avatar video."
      },
      "TTSRequest" : {
        "$ref" : "#/components/schemas/GenerateSpeechUsingPlainText"
      },
      "GenerateSpeechUsingPlainText" : {
        "type" : "object",
        "properties" : {
          "script" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/TextSource"
            }, {
              "$ref" : "#/components/schemas/URLSource"
            } ],
            "type" : "object",
            "properties" : {
              "localeCode" : {
                "$ref" : "#/components/schemas/SupportedLanguageCode"
              },
              "mediaType" : {
                "type" : "string",
                "enum" : [ "text/plain" ],
                "description" : "The format of the text resource."
              }
            },
            "required" : [ "localeCode", "mediaType" ]
          },
          "voiceId" : {
            "type" : "string",
            "description": "ID of the voice to use from the catalog of voices."
          },
          "output" : {
            "type" : "object",
            "properties" : {
              "mediaType" : {
                "$ref" : "#/components/schemas/SupportedAudioOutputAudioFormat"
              }
            },
            "required" : [ "mediaType" ]
          }
        },
        "required" : [ "voiceId", "output", "script" ]
      },
      "AvatarRequest" : {
        "type" : "object",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/GenerateAvatarUsingPlainText"
        }, {
          "$ref" : "#/components/schemas/GenerateAvatarUsingAudioFile"
        } ]
      },
      "GenerateAvatarUsingPlainText" : {
        "title": "Generate Avatar Using Plain Text",
        "type" : "object",
        "properties" : {
          "script" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/TextSource"
            }, {
              "$ref" : "#/components/schemas/URLSource"
            } ],
            "type" : "object",
            "properties" : {
              "localeCode" : {
                "$ref" : "#/components/schemas/SupportedLanguageCode"
              },
              "mediaType" : {
                "type" : "string",
                "enum" : [ "text/plain" ],
                "description": "The format of the text resource."
              }
            },
            "required" : [ "localeCode", "mediaType" ]
          },
          "voiceId" : {
            "type" : "string",
            "description": "ID of the voice to use from the catalog of voices."
          },
          "avatarId" : {
            "type" : "string",
            "description": "ID of the avatar to use from the catalog of avatars."
          },
          "output" : {
            "$ref" : "#/components/schemas/AvatarOutputObject"
          }
        },
        "required" : [ "voiceId", "output", "script", "avatarId" ]
      },
      "GenerateAvatarUsingAudioFile" : {
        "title": "Generate Avatar Using Audio File",
        "type" : "object",
        "properties" : {
          "audio" : {
            "type" : "object",
            "properties" : {
              "source" : {
                "$ref" : "#/components/schemas/URLObject"
              },
              "mediaType" : {
                "type" : "string",
                "enum" : [ "audio/wav", "audio/x-wav", "audio/aac" ]
              },
              "localeCode" : {
                "$ref" : "#/components/schemas/SupportedLanguageCode"
              }
            },
            "required" : [ "localeCode", "mediaType", "source" ]
          },
          "avatarId" : {
            "type" : "string",
            "description": "ID of the avatar to use from the catalog of avatars."
          },
          "output" : {
            "$ref" : "#/components/schemas/AvatarOutputObject"
          }
        },
        "required" : [ "output", "audio", "avatarId" ]
      },
      "URLSource" : {
        "type" : "object",
        "properties" : {
          "source" : {
            "type" : "object",
            "properties" : {
              "url" : {
                "type" : "string",
                "format" : "uri",
                "description" : "The pre-signed URL pointing to the resource to be used for avatar/speech generation."
              }
            }
          }
        }
      },
      "URLObject" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "format" : "uri",
            "description" : "The pre-signed URL pointing to the resource to be used for avatar/speech generation."
          }
        }
      },
      "AvatarOutputObject" : {
        "type" : "object",
        "properties" : {
          "mediaType" : {
            "$ref" : "#/components/schemas/SupportedOutputVideoFormat"
          },
          "background" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/OutputColor"
            }, {
              "$ref" : "#/components/schemas/URLSource"
            } ],
            "type" : "object",
            "properties" : {
              "type" : {
                "$ref" : "#/components/schemas/SupportedBackgroundType"
              }
            }
          },
          "resolution" : {
            "type" : "object",
            "properties" : {
              "width" : {
                "type" : "string"
              },
              "height" : {
                "type" : "string"
              }
            }
          }
        },
        "required" : [ "mediaType" ]
      },
      "TextSource" : {
        "description": "Details of the text resource.",
        "type" : "string",
        "properties" : {
          "text" : {
            "type" : "string"
          }
        }
      },
      "OutputColor" : {
        "type" : "string",
        "properties" : {
          "color" : {
            "type" : "string",
            "pattern" : "^#[0-9a-fA-F]{6}$",
            "description" : "For color as background of output, it should be six digit hexadecimal value"
          }
        }
      },
      "SubmitAPIResponse" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "type" : "string"
          },
          "statusUrl" : {
            "type" : "string"
          }
        }
      },
      "StatusAPIResponse" : {
        "type" : "object",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/StatusAPIInprogressResponse"
        }, {
          "$ref" : "#/components/schemas/StatusAPICompletedResponse"
        }, {
          "$ref" : "#/components/schemas/StatusAPIFailedResponse"
        } ]
      },
      "StatusAPIResponseStatus" : {
        "type" : "string",
        "enum" : [ "pending", "running", "failed", "succeeded" ],
        "description" : "Status of the job."
      },
      "StatusAPIInprogressResponse" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "type" : "string"
          },
          "status" : {
            "$ref" : "#/components/schemas/StatusAPIResponseStatus"
          }
        }
      },
      "StatusAPICompletedResponse" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "type" : "string"
          },
          "status" : {
            "$ref" : "#/components/schemas/StatusAPIResponseStatus"
          },
          "output" : {
            "type" : "object",
            "properties" : {
              "url" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "StatusAPIFailedResponse" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/StatusAPIResponseStatus"
          },
          "jobId": {
            "type" : "string"
          },
          "error_code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "FailedResponse" : {
        "type" : "object",
        "properties" : {
          "error_code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    },
    "examples": {
      "TextInputForSpeechGeneration" : {
        "summary" : "Generate speech using plain text",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "output" : {
            "mediaType" : "audio/wav"
          }
        }
      },
      "URLInputForSpeechGeneration" : {
        "summary" : "Generate speech using text file",
        "value" : {
          "script" : {
            "source" : {
              "url" : "<pre-signed url of text file>"
            },
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "output" : {
            "mediaType" : "audio/wav"
          }
        }
      },
      "SuccessfulVoicesResponse": {
        "summary": "Successful response with voices details",
        "value": {
          "voices": [{
            "voiceId": "v123",
            "displayName": "John Doe",
            "gender": "M",
            "style": "Professional",
            "voiceType": "Nurse",
            "status": "Active",
            "extendedPropertyMap": {},
            "wordsPerMinute": "100",
            "rolePlayList": [],
            "sampleURL": "<pre-signed url for downloading the sample audio>"
          }]
        }
      },
      "SuccessfulAvatarsResponse": {
        "summary": "Successful response with avatars details",
        "value": {
          "avatars": [{
            "avatarId": "a321",
            "displayName": "Alice",
            "gender": "F",
            "clothingStyle": "Formal",
            "ageGroup": "Young Adult",
            "ethnicity": "Caucasian",
            "status": "Active",
            "style": "Doctor",
            "extendedPropertyMap": {},
            "thumbnailUrls": {
              "hd": "<pre-signed url for downloading HD avatar thumbnail>",
              "lowRes": "<pre-signed url for downloading low resolution avatar thumbnail>"
            },
            "voiceId": "v321",
            "sampleVideo":  {
              "webm": "<pre-signed url for downloading the avatar sample video in WEBM format>",
              "mp4": "<pre-signed url for downloading the avatar sample video in MP4 format>"
            }
          }
          ]
        }
      },
      "SubmitRequestResponse" : {
        "summary" : "Successful response with job details",
        "value" : {
          "jobId" : "string",
          "statusUrl" : "string"
        }
      },
      "BadRequestError": {
        "summary" : "Bad Request",
        "value" : {
          "error_code" : "invalid_json",
          "message" : "Invalid request. Please check the input data."
        }
      },
      "ErrorBodyUnauthorised": {
        "summary": "Oauth token is not valid",
        "value": {
          "error_code": "401013",
          "message": "Oauth token is not valid"
        }
      },
      "ErrorBodyAccessDenied": {
        "value": {
          "error_code": "unauthorized_forbidden",
          "message": "Access denied: You do not have the necessary permissions to access this resourced"
        }
      },
      "ErrorBodyForbidden": {
        "summary": "Api Key is required",
        "value": {
          "error_code":"403000",
          "message":"Api Key is required"
        }
      },
      "UserNotEntitledError": {
        "summary": "User Not Entitled",
        "value": {
          "error_code": "user_not_entitled",
          "message": "User not entitled: You do not have the entitlement to perform this operation."
        }
      },
      "QuotaExceededError": {
        "summary": "Quota Exceeded",
        "value": {
          "error_code": "quota_exhausted",
          "message": "Quota exceeded: You have reached the maximum allowed usage for this service."
        }
      },
      "UserProfileDeniedError": {
        "summary": "User Profile Denied",
        "value": {
          "error_code": "user_profile_denied",
          "message": "User profile denied: Your profile does not meet the requirements for this action."
        }
      },
      "UserBlockedError": {
        "summary": "User Blocked By Admin",
        "value": {
          "error_code": "user_blocked_by_admin",
          "message": "Access blocked: Your account has been blocked by an administrator."
        }
      },
      "InvalidSubscriptionError": {
        "summary": "Invalid Subscription",
        "value": {
          "error_code": "invalid_subscription",
          "message": "Invalid subscription: Your subscription does not cover this service or feature."
        }
      },
      "ViolationError": {
        "summary": "User Blocked Due To Violation",
        "value": {
          "error_code": "user_blocked_due_to_violation",
          "message": "Account blocked: Your account has been blocked due to a violation of terms."
        }
      },
      "TasteExhaustedError": {
        "summary": "Taste Exhausted",
        "value": {
          "error_code": "taste_exhausted",
          "message": "Unauthorized: Limited taste for user is exhausted."
        }
      },
      "AccessError": {
        "summary": "Access Error",
        "value": {
          "error_code": "unauthorized",
          "message": "Token not allowed in the current context"
        }
      },
      "ErrorBodyResourceNotFound" : {
        "summary" : "Not Found",
        "value" : {
          "error_code" : "unknown_job_id",
          "message" : "The requested resource was not found."
        }
      },
      "UserBKSFailedErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Unauthorised authorization request"
        }
      },
      "InvalidInputErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "The request could not be processed due to invalid input"
        }
      },
      "MissingInputFileUrlErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Missing input file URL"
        }
      },
      "InvalidInputUrlErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid input 'url' specified"
        }
      },
      "InputFileFormatValidationErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Input file format is not supported"
        }
      },
      "MissingScriptErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Script missing in the payload"
        }
      },
      "EmptyTextForScriptErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "The provided 'text' is empty"
        }
      },
      "TextLengthExceededForScriptErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Input text has more than 20000 characters"
        }
      },
      "TextLengthSubceededForScriptErrorExample": {
        "value": {
          "error_code":"validation_error",
          "message": "Input text has less than 15 characters"
        }
      },
      "ScriptInvalidASCIIRange" : {
        "value": {
          "error_code":"validation_error",
          "message": "Input contains unsupported characters. Please use only ASCII or extended ASCII."
        }
      },
      "ScriptInvalidTextSupportedRange" : {
        "value": {
          "error_code":"validation_error",
          "message": "Input contains unsupported characters. Please remove any Emojis or Symbols"
        }
      },
      "InvalidOrMissingLocaleCodeForScriptErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid source locale code specified"
        }
      },
      "MissingMediaTypeForScriptErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Missing script 'mediaType' in the payload"
        }
      },
      "MediatypeIncomatibleForText" : {
        "value": {
          "error_code":"validation_error",
          "message": "Provided text format is not valid for input mediaType"
        }
      },
      "MissingSourceLocaleErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Source locale missing in payload"
        }
      },
      "SourceUrlSourceTextConflictErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Both source url and source text is present in the request"
        }
      },
      "UnsupportedVoiceIdErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "The requested 'voiceId' is not supported"
        }
      },
      "MissingVoiceIdErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Missing 'voiceId' in the payload"
        }
      },
      "MissingOutputErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Missing 'output' field in the payload"
        }
      },
      "MissingMediaTypeForOutputErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Missing output 'mediaType' in payload"
        }
      },
      "InvalidOutputFileFormatErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Output file format is not valid"
        }
      },
      "InvalidRequestPayloadErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Text to speech service marked this request as invalid"
        }
      },
      "InputScriptAudioConflictErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Must specify either script or audio, not both"
        }
      },
      "InputScriptAudioMissingErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Must specify either script or audio, both cannot be empty"
        }
      },
      "InputScriptAudioMissingOrInvalidErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Provide non-empty text in 'script' or a valid URL in 'source'"
        }
      },
      "InvalidOrMissingAudioUrlErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Invalid or missing 'url' specified in audio"
        }
      },
      "MissingAudioSourceErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Audio source missing in payload"
        }
      },
      "MissingAvatarIdErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "The 'avatarId' property is required"
        }
      },
      "UnsupportedAvatarIdErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "The requested 'avatarId' is not supported"
        }
      },
      "MissingBackgroundUrlErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Background URL must be specified for type 'video' or 'image'"
        }
      },
      "MissingBackgroundTypeErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Background type must be set to 'image', 'video', 'color' or 'transparent'"
        }
      },
      "InvalidBackgroundUrlErrorExample": {
        "value": {
          "error_code": "validation_error",
          "message": "Invalid 'url' specified in background"
        }
      },
      "BackgroundSourceColorConflictErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Must specify either background source or color, not both"
        }
      },
      "BackgroundSourceColorMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Must specify either background source or color, both cannot be empty"
        }
      },
      "InvalidBackgroundColorErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid 'color' specified in background"
        }
      },
      "MissingBackgroundColorErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Background color must be specified for type 'color'"
        }
      },
      "BackgroundIncompatibleWithFormat" : {
        "value": {
          "error_code":"validation_error",
          "message": "Transparent background is only supported for 'video/webm' output file format"
        }
      },
      "FormatIncompatibleWithBackground" : {
        "value": {
          "error_code":"validation_error",
          "message": "The 'video/webm' output format can only be used when the background type is 'transparent'"
        }
      },
      "UnsupportedOutputResolution" :{
        "value" : {
          "error_code": "validation_error",
          "message": "Unsupported resolution specified in output. Accepted values are [1920x1080, 3840x2160]"
        }
      },
      "UnsupportedShotTypeErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Shot Type is not supported."
        }
      },
      "InvalidSourceUrlErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid source url"
        }
      },
      "IncorrectVoiceNameErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "The provided `voice name` is incorrect in the script text"
        }
      },
      "ErrorBodyTooManyRequests" : {
        "summary" : "Too many requests",
        "value" : {
          "error_code" : "429050",
          "message" : "Too many requests"
        }
      },
      "ErrorBodyRateLimited": {
        "value": {
          "error_code": "rate_limited",
          "message": "Too many requests received"
        }
      },
      "ErrorBodyLegalReasons": {
        "value": {
          "error_code": "unauthorized_legal_reasons",
          "message": "Unauthorized access: Legal restrictions prevent you from accessing this resource."
        }
      },
      "RunTimeError": {
        "value": {
          "error_code": "runtime_error",
          "message": "Internal Server Error"
        }
      },
      "TTSRuntimeError": {
        "value" : {
          "error_code": "runtime_error",
          "message": "Internal Server Error while receiving or handling response"
        }
      },
      "TTSEntityCreationError": {
        "value" : {
          "error_code": "runtime_error",
          "message": "Internal Server Error while creating text to speech request"
        }
      },
      "TTSServiceSubmitError": {
        "value" : {
          "error_code": "runtime_error",
          "message": "Internal Server Error while submitting text to speech request"
        }
      },
      "PlainTextInputForAvatarGeneration" : {
        "summary" : "Generate avatar using plain text",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4"
          }
        }
      },
      "PlainTextInputForAvatarGenerationUsingVideoBackground" : {
        "summary" : "Generate avatar using plain text and video background",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4",
            "background" : {
              "type" : "video",
              "source" : {
                "url" : "<pre-signed url of background video>"
              }
            }
          }
        }
      },
      "PlainTextInputForAvatarGenerationUsingImageBackground" : {
        "summary" : "Generate avatar using plain text and image background",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4",
            "background" : {
              "type" : "image",
              "source" : {
                "url" : "<pre-signed url of background image>"
              }
            }
          }
        }
      },
      "PlainTextInputForAvatarGenerationUsingColorBackground" : {
        "summary" : "Generate avatar using plain text and color background",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4",
            "background" : {
              "type" : "color",
              "color": "#FFF000"
            }
          }
        }
      },
      "URLTextInputForAvatarGeneration" : {
        "summary" : "Generate avatar using text file",
        "value" : {
          "script" : {
            "source" : {
              "url" : "<pre-signed url of text file>"
            },
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4"
          }
        }
      },
      "URLInputForAvatarGeneration" : {
        "summary" : "Generate avatar using audio file",
        "value" : {
          "audio" : {
            "source" : {
              "url" : "<pre-signed url of input audio>"
            },
            "mediaType" : "audio/wav",
            "localeCode" : "en-US"
          },
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4"
          }
        }
      },
      "StatusApiInProgressRequestResponse" : {
        "summary" : "Inprogress response with job details",
        "value" : {
          "jobId" : "string",
          "status" : "running"
        }
      },
      "StatusApiSuccessRequestResponse" : {
        "summary" : "Success response with job details",
        "value" : {
          "jobId" : "string",
          "status" : "succeeded",
          "output" : {
            "url" : "string"
          }
        }
      },
      "StatusAPIFailedInputFileDownloadResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"resource_not_found",
          "message": "Failed to download input file"
        }
      },
      "StatusAPIFailedUnsafeScriptResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"validation_error",
          "message": "The provided prompt is considered unsafe and it cannot be used to generate content"
        }
      },
      "StatusAPIFailedBackgroundFileResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"validation_error",
          "message": "Error while downloading media format file from Background URL"
        }
      },
      "StatusAPIFailedMediatypeMismatchResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"validation_error",
          "message": "Provided input mediaType should match the type of source media"
        }
      },
      "StatusAPIFailedUnsupportedBackgroundResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"validation_error",
          "message": "Unsupported file type for background"
        }
      },
      "StatusAPIFailedBackgroundResulutionMismatchResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"validation_error",
          "message": "Background asset resolution should match output background resolution (with default value 1920x1080)"
        }
      },
      "StatusAPIFailedDurationTooLongResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"validation_error",
          "message": "Audio duration should be less than 30 mins"
        }
      },
      "StatusAPIFailedCAISigningResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "CAI Signing Failed"
        }
      },
      "StatusAPIFailedUploadErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Unable to upload the output"
        }
      },
      "StatusAPIFailedDownloadErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Unable to download stock media"
        }
      },
      "StatusAPIFailedTTSErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Run time error in tts"
        }
      },
      "StatusAPIFailedAvatarErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Run time error in avatar"
        }
      },
      "StatusAPIFailedLipsyncErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Validation failure in Lipsync Pipeline"
        }
      },
      "StatusAPIFailedFFMpegErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Failed in FFmpeg worker"
        }
      },
      "StatusAPIFailedLipsyncPollingErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Failed while polling for Lipsync"
        }
      },
      "StatusAPIFailedMediaTrimErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Error while triming avatar video"
        }
      },
      "StatusAPIFailedMediaTrimAlphaErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Error while triming avatar alpha video"
        }
      },
      "StatusAPIFailedConfigDownloadResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Error while downloading actor config file"
        }
      },
      "StatusAPIFailedInternalErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Internal Server Error while receiving or handling response"
        }
      },
      "StatusAPIFailedTTSInternalErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Internal Server Error while getting text to speech request status"
        }
      },
      "StatusAPIFailedEntitiesErrorResponse": {
        "value": {
          "jobId": "string",
          "status": "failed",
          "error_code":"runtime_error",
          "message": "Error while fetching available entities"
        }
      }
    }
  }
}
