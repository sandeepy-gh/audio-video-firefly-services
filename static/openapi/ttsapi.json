{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "TTS (Text-to-Speech) and Avatar API",
    "description": "This REST API provides resources for generating speech or avatar video from text or pre-signed URLs."
  },
  "servers": [
    {
      "url": "https://audio-video-api.adobe.io/v1",
      "description": "Production environment - GA"
    },
    {
      "url": "https://audio-video-api-stage.adobe.io/v1",
      "description": "Staging environment - GA"
    }
  ],
  "security": [
    {
      "AccessToken": [],
      "X-Api-Key": []
    }
  ],
  "paths": {
    "/voices": {
      "get": {
        "summary": "Get available voices",
        "description": "This endpoint provides the list of all available voices for the user's enterprise.",
        "operationId": "voices",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulVoicesResponse"
                },
                "examples": {
                  "Success": {
                    "$ref": "#/components/examples/SuccessfulVoicesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyUnauthorized": {
                    "$ref": "#/components/examples/UnauthorizedAccessError"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyForbidden": {
                    "$ref": "#/components/examples/ErrorBodyForbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyResourceNotFound": {
                    "$ref": "#/components/examples/ErrorBodyResourceNotFound"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyMethodNotAllowed": {
                    "$ref": "#/components/examples/ErrorBodyMethodNotAllowed"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyTooManyRequests": {
                    "$ref": "#/components/examples/ErrorBodyTooManyRequests"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "RunTimeErrorInStudio": {
                    "$ref": "#/components/examples/RunTimeErrorInStudio"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/avatars": {
      "get": {
        "summary": "Get available avatars",
        "description": "This endpoint provides the list of all available avatars for the user's enterprise.",
        "operationId": "avatars",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulAvatarsResponse"
                },
                "examples": {
                  "Success": {
                    "$ref": "#/components/examples/SuccessfulAvatarsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyUnauthorized": {
                    "$ref": "#/components/examples/UnauthorizedAccessError"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyForbidden": {
                    "$ref": "#/components/examples/ErrorBodyForbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyResourceNotFound": {
                    "$ref": "#/components/examples/ErrorBodyResourceNotFound"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyMethodNotAllowed": {
                    "$ref": "#/components/examples/ErrorBodyMethodNotAllowed"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "ErrorBodyTooManyRequests": {
                    "$ref": "#/components/examples/ErrorBodyTooManyRequests"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                },
                "examples": {
                  "RunTimeErrorInStudio": {
                    "$ref": "#/components/examples/RunTimeErrorInStudio"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/generate-speech" : {
      "post" : {
        "summary" : "Generate speech from text",
        "description" : "This endpoint generates speech from a transcript. You can provide the transcript either as plain text or a pre-signed URL. The response will include a job ID and a status URL for tracking the job.",
        "operationId" : "generate-speech",
        "requestBody" : {
          "description" : "The request body contains the transcript used for generating speech.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TTSRequest"
              },
              "examples" : {
                "TextInputForSpeechGeneration" : {
                  "$ref" : "#/components/examples/TextInputForSpeechGeneration"
                },
                "URLInputForSpeechGeneration" : {
                  "$ref" : "#/components/examples/URLInputForSpeechGeneration"
                }
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubmitAPIResponse"
                },
                "examples" : {
                  "SubmitRequestResponse" : {
                    "$ref" : "#/components/examples/SubmitRequestResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "BadRequestError" : {
                    "$ref" : "#/components/examples/BadRequestError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "UnauthorizedAccessError" : {
                    "$ref" : "#/components/examples/UnauthorizedAccessError"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyForbidden" : {
                    "$ref" : "#/components/examples/ErrorBodyForbidden"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyResourceNotFound" : {
                    "$ref" : "#/components/examples/ErrorBodyResourceNotFound"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "InputFileTypeValidationErrorExample" : {
                    "$ref" : "#/components/examples/InputFileTypeValidationErrorExample"
                  },
                  "InvalidTextForScriptErrorExample" : {
                    "$ref" : "#/components/examples/InvalidTextForScriptErrorExample"
                  },
                  "InvalidOrMissingLocaleCodeForScriptErrorExample" : {
                    "$ref" : "#/components/examples/InvalidOrMissingLocaleCodeForScriptErrorExample"
                  },
                  "InvalidMediaTypeURLErrorExample" : {
                    "$ref" : "#/components/examples/InvalidMediaTypeURLErrorExample"
                  },
                  "ErrorDownloadingFileFromURLErrorExample" : {
                    "$ref" : "#/components/examples/ErrorDownloadingFileFromURLErrorExample"
                  },
                  "CharacterLimitExceededErrorExample" : {
                    "$ref" : "#/components/examples/CharacterLimitExceededErrorExample"
                  },
                  "IncorrectOutputConfigForAvatarInputErrorExample" : {
                    "$ref" : "#/components/examples/IncorrectOutputConfigForAvatarInputErrorExample"
                  },
                  "UserBKSFailedErrorExample" : {
                    "$ref" : "#/components/examples/UserBKSFailedErrorExample"
                  },
                  "BothScriptAndAudioProvidedErrorExample" : {
                    "$ref" : "#/components/examples/BothScriptAndAudioProvidedErrorExample"
                  },
                  "AudioFieldMissingURLErrorExample" : {
                    "$ref" : "#/components/examples/AudioFieldMissingURLErrorExample"
                  },
                  "TextOrURLMissingErrorExample" : {
                    "$ref" : "#/components/examples/TextOrURLMissingErrorExample"
                  },
                  "BothScriptAndAudioMissingErrorExample" : {
                    "$ref" : "#/components/examples/BothScriptAndAudioMissingErrorExample"
                  },
                  "SourceNotPresentForScriptOrAudioErrorExample" : {
                    "$ref" : "#/components/examples/SourceNotPresentForScriptOrAudioErrorExample"
                  },
                  "UnsupportedShotTypeErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedShotTypeErrorExample"
                  },
                  "MissingOutputConfigErrorExample" : {
                    "$ref" : "#/components/examples/MissingOutputConfigErrorExample"
                  },
                  "UnsupportedVoiceIdErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedVoiceIdErrorExample"
                  },
                  "MissingVoiceIdErrorExample" : {
                    "$ref" : "#/components/examples/MissingVoiceIdErrorExample"
                  },
                  "InvalidTextFileURLErrorExample" : {
                    "$ref" : "#/components/examples/InvalidTextFileURLErrorExample"
                  },
                  "BackgroundUrlMissingErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundUrlMissingErrorExample"
                  },
                  "IncorrectBackgroundUrlErrorExample" : {
                    "$ref" : "#/components/examples/IncorrectBackgroundUrlErrorExample"
                  },
                  "UnsupportedFileTypeForVideoBackgroundErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedFileTypeForVideoBackgroundErrorExample"
                  },
                  "BackgroundTypeMissingErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundTypeMissingErrorExample"
                  },
                  "AvatarIdMissingErrorExample" : {
                    "$ref" : "#/components/examples/AvatarIdMissingErrorExample"
                  },
                  "InvalidBackgroundUrlErrorExample" : {
                    "$ref" : "#/components/examples/InvalidBackgroundUrlErrorExample"
                  },
                  "BackgroundAssetResolutionErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundAssetResolutionErrorExample"
                  },
                  "UnsupportedAvatarIdErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedAvatarIdErrorExample"
                  },
                  "BackgroundVideoShouldHaveAudioErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundVideoShouldHaveAudioErrorExample"
                  },
                  "DurationMoreThanSupportedErrorExample" : {
                    "$ref" : "#/components/examples/DurationMoreThanSupportedErrorExample"
                  },
                  "ScriptMissingErrorExample" : {
                    "$ref" : "#/components/examples/ScriptMissingErrorExample"
                  },
                  "InputMediaTypeMissingErrorExample" : {
                    "$ref" : "#/components/examples/InputMediaTypeMissingErrorExample"
                  },
                  "IncorrectInputJsonErrorExample" : {
                    "$ref" : "#/components/examples/IncorrectInputJsonErrorExample"
                  },
                  "OutputMediaTypeMissingErrorExample" : {
                    "$ref" : "#/components/examples/OutputMediaTypeMissingErrorExample"
                  },
                  "FileUrlMissingErrorExample" : {
                    "$ref" : "#/components/examples/FileUrlMissingErrorExample"
                  },
                  "SourceLocaleMissingErrorExample" : {
                    "$ref" : "#/components/examples/SourceLocaleMissingErrorExample"
                  },
                  "AudioSourceMissingErrorExample" : {
                    "$ref" : "#/components/examples/AudioSourceMissingErrorExample"
                  },
                  "AudioSourceUrlMissingErrorExample" : {
                    "$ref" : "#/components/examples/AudioSourceUrlMissingErrorExample"
                  },
                  "BothSourceUrlAndTextPresentErrorExample" : {
                    "$ref" : "#/components/examples/BothSourceUrlAndTextPresentErrorExample"
                  },
                  "InvalidRequestPayloadErrorExample" : {
                    "$ref" : "#/components/examples/InvalidRequestPayloadErrorExample"
                  },
                  "BothBackgroundSourceUrlAndColorPresentErrorExample" : {
                    "$ref" : "#/components/examples/BothBackgroundSourceUrlAndColorPresentErrorExample"
                  },
                  "MissingBothBackgroundAndColorErrorExample" : {
                    "$ref" : "#/components/examples/MissingBothBackgroundAndColorErrorExample"
                  },
                  "InvalidBackgroundColorErrorExample" : {
                    "$ref" : "#/components/examples/InvalidBackgroundColorErrorExample"
                  },
                  "BackgroundColorMissingErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundColorMissingErrorExample"
                  },
                  "InvalidInputSourceUrlErrorExample" : {
                    "$ref" : "#/components/examples/InvalidInputSourceUrlErrorExample"
                  },
                  "ScriptInvalidASCIIRange" : {
                    "$ref" : "#/components/examples/ScriptInvalidASCIIRange"
                  },
                  "MediatypeIncomatibleForText" : {
                    "$ref" : "#/components/examples/MediatypeIncomatibleForText"
                  },
                  "ScriptInvalidTextSupportedRange" : {
                    "$ref" : "#/components/examples/ScriptInvalidTextSupportedRange"
                  }
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyTooManyRequests" : {
                    "$ref" : "#/components/examples/ErrorBodyTooManyRequests"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "TTSServiceSubmitError" : {
                    "$ref" : "#/components/examples/TTSServiceSubmitError"
                  },
                  "TTSEntityCreationError" : {
                    "$ref" : "#/components/examples/TTSEntityCreationError"
                  },
                  "TTSRuntimeError" : {
                    "$ref" : "#/components/examples/TTSRuntimeError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/generate-avatar" : {
      "post" : {
        "summary" : "Generate avatar video from text",
        "description" : "This endpoint generates an avatar video from a transcript. You can provide the transcript either as plain text or a pre-signed URL. The response will include a job ID and a status URL for tracking the job.",
        "operationId" : "generate-avatar",
        "requestBody" : {
          "description" : "The request body contains the transcript and details for generating an avatar.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AvatarRequest"
              },
              "examples" : {
                "PlainTextInputForAvatarGeneration" : {
                  "$ref" : "#/components/examples/PlainTextInputForAvatarGeneration"
                },
                "PlainTextInputForAvatarGenerationUsingVideoBackground" : {
                  "$ref" : "#/components/examples/PlainTextInputForAvatarGenerationUsingVideoBackground"
                },
                "PlainTextInputForAvatarGenerationUsingImageBackground" : {
                  "$ref" : "#/components/examples/PlainTextInputForAvatarGenerationUsingImageBackground"
                },
                "PlainTextInputForAvatarGenerationUsingColorBackground" : {
                  "$ref" : "#/components/examples/PlainTextInputForAvatarGenerationUsingColorBackground"
                },
                "URLTextInputForAvatarGeneration" : {
                  "$ref" : "#/components/examples/URLTextInputForAvatarGeneration"
                },
                "URLInputForAvatarGeneration" : {
                  "$ref" : "#/components/examples/URLInputForAvatarGeneration"
                }
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubmitAPIResponse"
                },
                "examples" : {
                  "SubmitRequestResponse" : {
                    "$ref" : "#/components/examples/SubmitRequestResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "BadRequestError" : {
                    "$ref" : "#/components/examples/BadRequestError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "UnauthorizedAccessError" : {
                    "$ref" : "#/components/examples/UnauthorizedAccessError"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyForbidden" : {
                    "$ref" : "#/components/examples/ErrorBodyForbidden"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyResourceNotFound" : {
                    "$ref" : "#/components/examples/ErrorBodyResourceNotFound"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "BackgroundUrlMissingErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundUrlMissingErrorExample"
                  },
                  "IncorrectBackgroundUrlErrorExample" : {
                    "$ref" : "#/components/examples/IncorrectBackgroundUrlErrorExample"
                  },
                  "UnsupportedFileTypeForVideoBackgroundErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedFileTypeForVideoBackgroundErrorExample"
                  },
                  "BackgroundTypeMissingErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundTypeMissingErrorExample"
                  },
                  "AvatarIdMissingErrorExample" : {
                    "$ref" : "#/components/examples/AvatarIdMissingErrorExample"
                  },
                  "InvalidBackgroundUrlErrorExample" : {
                    "$ref" : "#/components/examples/InvalidBackgroundUrlErrorExample"
                  },
                  "BackgroundAssetResolutionErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundAssetResolutionErrorExample"
                  },
                  "UnsupportedAvatarIdErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedAvatarIdErrorExample"
                  },
                  "BackgroundVideoShouldHaveAudioErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundVideoShouldHaveAudioErrorExample"
                  },
                  "DurationMoreThanSupportedErrorExample" : {
                    "$ref" : "#/components/examples/DurationMoreThanSupportedErrorExample"
                  },
                  "UnsupportedOutputResolution" : {
                    "$ref" : "#/components/examples/UnsupportedOutputResolution"
                  },
                  "BackgroundIncompatibleWithFormat" : {
                    "$ref" : "#/components/examples/BackgroundIncompatibleWithFormat"
                  },
                  "FormatIncompatibleWithBackground" : {
                    "$ref" : "#/components/examples/FormatIncompatibleWithBackground"
                  }
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyTooManyRequests" : {
                    "$ref" : "#/components/examples/ErrorBodyTooManyRequests"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "TTSServiceSubmitError" : {
                    "$ref" : "#/components/examples/TTSServiceSubmitError"
                  },
                  "TTSRuntimeError" : {
                    "$ref" : "#/components/examples/TTSRuntimeError"
                  }

                }
              }
            }
          }
        }
      }
    },
    "/status/{jobId}" : {
      "get" : {
        "summary" : "Get the status of a job",
        "description" : "Provides the status and result of an asynchronous TTS and Avatar job. <br></br> Use this endpoint with the stage environment URL for stage enviornment status and results.",
        "operationId" : "status",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "description" : "The job ID of an asynchronous TTS and Avatar job.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusAPIResponse"
                },
                "examples" : {
                  "StatusAPIInprogressRequestResponse" : {
                    "$ref" : "#/components/examples/StatusApiInProgressRequestResponse"
                  },
                  "StatusAPISuccessRequestResponse" : {
                    "$ref" : "#/components/examples/StatusApiSuccessRequestResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "UnauthorizedAccessError" : {
                    "$ref" : "#/components/examples/UnauthorizedAccessError"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyForbidden" : {
                    "$ref" : "#/components/examples/ErrorBodyForbidden"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyResourceNotFound" : {
                    "$ref": "#/components/examples/ErrorBodyResourceNotFound"
                  },
                  "UnknownJobId" : {
                    "$ref" : "#/components/examples/UnknownJobId"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "UserBKSFailedErrorExample" : {
                    "$ref" : "#/components/examples/UserBKSFailedErrorExample"
                  },
                  "ErrorDownloadingFileFromURLErrorExample" : {
                    "$ref" : "#/components/examples/ErrorDownloadingFileFromURLErrorExample"
                  },
                  "BackgroundVideoShouldHaveAudioErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundVideoShouldHaveAudioErrorExample"
                  },
                  "DurationMoreThanSupportedErrorExample" : {
                    "$ref" : "#/components/examples/DurationMoreThanSupportedErrorExample"
                  },
                  "BackgroundAssetResolutionErrorExample" : {
                    "$ref" : "#/components/examples/BackgroundAssetResolutionErrorExample"
                  },
                  "UnsupportedFileTypeForVideoBackgroundErrorExample" : {
                    "$ref" : "#/components/examples/UnsupportedFileTypeForVideoBackgroundErrorExample"
                  },
                  "IncorrectBackgroundUrlErrorExample" : {
                    "$ref" : "#/components/examples/IncorrectBackgroundUrlErrorExample"
                  },
                  "ScriptPromptUnsafe": {
                    "$ref": "#/components/examples/ScriptPromptUnsafe"
                  }
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "ErrorBodyTooManyRequests" : {
                    "$ref" : "#/components/examples/ErrorBodyTooManyRequests"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FailedResponse"
                },
                "examples" : {
                  "TTSStatusError" : {
                    "$ref" : "#/components/examples/TTSStatusError"
                  },
                  "RunTimeErrorInAvatar" : {
                    "$ref" : "#/components/examples/RunTimeErrorInAvatarExample"
                  },
                  "ValidationFailureInLipsyncPipeline" : {
                    "$ref" : "#/components/examples/ValidationFailureInLipsyncPipelineExample"
                  },
                  "FailedInFFmpegWorker" : {
                    "$ref" : "#/components/examples/FailedInFFmpegWorkerExample"
                  },
                  "FailedWhilePollingForLipsync" : {
                    "$ref" : "#/components/examples/FailedWhilePollingForLipsyncExample"
                  },
                  "ErrorWhileTrimmingAvatarVideo" : {
                    "$ref" : "#/components/examples/ErrorWhileTrimmingAvatarVideoExample"
                  },
                  "ErrorWhileTrimmingAvatarAlphaVideo" : {
                    "$ref" : "#/components/examples/ErrorWhileTrimmingAvatarAlphaVideoExample"
                  },
                  "ErrorWhileDownloadingActorConfigFileFromS3" : {
                    "$ref" : "#/components/examples/ErrorWhileDownloadingActorConfigFileFromS3Example"
                  },
                  "CAISigningFailed" : {
                    "$ref" : "#/components/examples/CAISigningFailed"
                  },
                  "UnableToUploadOutput" : {
                    "$ref" : "#/components/examples/UnableToUploadOutput"
                  },
                  "RunTimeErrorInTTS" : {
                    "$ref" : "#/components/examples/RunTimeErrorInTTS"
                  },
                  "UnableToDownloadStockMedia" : {
                    "$ref" : "#/components/examples/UnableToDownloadStockMedia"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "AccessToken": {
        "type": "http",
        "scheme": "bearer"
      },
      "X-Api-Key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "SuccessfulVoicesResponse": {
        "type": "object",
        "description" : "List of available voices.",
        "properties": {
          "voices": {
            "type": "array",
            "items" : {"$ref" : "#/components/schemas/VoiceEntity"}

          }
        }
      },
      "VoiceEntity" : {
        "type" : "object",
        "description" : "Details of Voice Entity.",
        "properties": {
          "voiceId": {
            "type": "string",
            "description": "The unique ID for the voice."
          },
          "displayName": {
            "type": "string",
            "description": "The displayed name for the voice."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the voice."
          },
          "style": {
            "type": "string",
            "description": "The speaking style of the voice.",
            "enum": ["Casual", "Excited"]
          },
          "voiceType": {
            "type": "string",
            "description": "Not applicable at this time."
          },
          "status": {
            "type": "string",
            "description": "This determines if the specific voice ID is available for use. Deprecated voices will have an Inactive status.",
            "enum": ["Active", "Inactive"]
          },
          "extendedPropertyMap": {
            "type": "object",
            "description": "This is a field for any additional properties for the voice."

          },
          "wordsPerMinute": {
            "type": "string",
            "description": "The speed of speaking, in words per minute."
          },
          "rolePlayList": {
            "type": "array",
            "description": "Not applicable at this time.",
            "items": {
              "type": "string"
            }
          },
          "sampleURL": {
            "type": "string",
            "description": "A pre-signed URL for downloading the sample audio."
          }
        }
      },
      "SuccessfulAvatarsResponse": {
        "type": "object",
        "description" : "List of available avatars.",
        "properties": {
          "avatars": {
            "type" : "array",
            "items":{"$ref" : "#/components/schemas/AvatarEntity"}

          }
        }
      },
      "AvatarEntity": {
        "type" : "object",
        "description" : "Details of the avatar entity.",
        "properties": {
          "avatarId": {
            "type": "string",
            "description": "The unique ID for the avatar."
          },
          "displayName": {
            "type": "string",
            "description": "The displayed name for the avatar."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the avatar."
          },
          "clothingStyle": {
            "type": "string",
            "description": "The clothing style worn by the avatar.",
            "enum": ["Casual", "Formal", "Professional"]
          },
          "ageGroup": {
            "type": "string",
            "description": "The intended age bracket of the avatar.",
            "enum": ["Young Adult", "Middle Aged", "Senior"]
          },
          "ethnicity": {
            "type": "string",
            "description": "The ethnicity of the avatar."
          },
          "style": {
            "type": "string",
            "description": "This property is used when the avatar wears a professional or region-specific costume (like Nurse, Doctor, Emergency Worker, Retail Worker, etc.)."
          },
          "status": {
            "type": "string",
            "description": "This determines if the specific avatar ID is available for use. Deprecated avatars will have an Inactive status.",
            "enum": ["Active", "Inactive"]
          },
          "extendedPropertyMap": {
            "type": "object",
            "description": "This is a field for any additional properties for the avatar."
          },
          "thumbnailUrls": {
            "type": "object",
            "properties": {
              "hd" : {
                "type": "string",
                "description": "A pre-signed URL for downloading the high-resolution avatar thumbnail."
              },
              "lowRes" : {
                "type": "string",
                "description": "A pre-signed URL for downloading the low-resolution avatar thumbnail."
              }
            }

          },
          "voiceId": {
            "type": "string",
            "description": "The unique ID for the voice."
          },
          "sampleVideo": {
            "type": "object",
            "properties": {
              "webm": {
                "type": "string",
                "description": "A pre-signed URL for downloading avatar sample video in WEBM format."
              },
              "mp4": {
                "type": "string",
                "description": "A pre-signed URL for downloading avatar sample video in MP4 format."
              }
            }
          }
        }
      },
      "SupportedLanguageCode" : {
        "type" : "string",
        "enum" : ["en-US", "es-ES", "de-DE", "fr-FR", "da-DK", "en-GB", "en-IN", "es-419", "es-AR", "fr-CA", "hi-IN",
          "it-IT", "ja-JP", "ko-KR", "nb-NO", "pt-BR", "pt-PT", "nl-NL", "zh-CN", "sv-SE"],
        "description": "The language code for the supported language desired in the result."
      },
      "SupportedAudioOutputAudioFormat" : {
        "type" : "string",
        "enum" : [ "audio/wav"],
        "description": "The supported audio format for output."
      },
      "SupportedOutputVideoFormat" : {
        "type" : "string",
        "enum" : [ "video/mp4", "video/webm" ],
        "description": "The supported video format for background video for Avatar."
      },
      "SupportedBackgroundType" : {
        "type" : "string",
        "enum" : [ "color", "video", "image", "transparent" ],
        "description" : "Supported background type for output Avatar video."
      },
      "TTSRequest" : {
        "$ref" : "#/components/schemas/GenerateSpeechUsingPlainText"
      },
      "GenerateSpeechUsingPlainText" : {
        "type" : "object",
        "properties" : {
          "script" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/TextSource"
            }, {
              "$ref" : "#/components/schemas/URLSource"
            } ],
            "type" : "object",
            "properties" : {
              "localeCode" : {
                "$ref" : "#/components/schemas/SupportedLanguageCode"
              },
              "mediaType" : {
                "type" : "string",
                "enum" : [ "text/plain" ],
                "description" : "The format of the text resource."
              }
            },
            "required" : [ "localeCode", "mediaType" ]
          },
          "voiceId" : {
            "type" : "string",
            "description": "ID of the voice to use from the catalog of voices."
          },
          "output" : {
            "type" : "object",
            "properties" : {
              "mediaType" : {
                "$ref" : "#/components/schemas/SupportedAudioOutputAudioFormat"
              }
            },
            "required" : [ "mediaType" ]
          }
        },
        "required" : [ "voiceId", "output", "script" ]
      },
      "AvatarRequest" : {
        "type" : "object",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/GenerateAvatarUsingPlainText"
        }, {
          "$ref" : "#/components/schemas/GenerateAvatarUsingAudioFile"
        } ]
      },
      "GenerateAvatarUsingPlainText" : {
        "title": "Generate Avatar Using Plain Text",
        "type" : "object",
        "properties" : {
          "script" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/TextSource"
            }, {
              "$ref" : "#/components/schemas/URLSource"
            } ],
            "type" : "object",
            "properties" : {
              "localeCode" : {
                "$ref" : "#/components/schemas/SupportedLanguageCode"
              },
              "mediaType" : {
                "type" : "string",
                "enum" : [ "text/plain" ],
                "description": "The format of the text resource."
              }
            },
            "required" : [ "localeCode", "mediaType" ]
          },
          "voiceId" : {
            "type" : "string",
            "description": "ID of the voice to use from the catalog of voices."
          },
          "avatarId" : {
            "type" : "string",
            "description": "ID of the avatar to use from the catalog of avatars."
          },
          "output" : {
            "$ref" : "#/components/schemas/AvatarOutputObject"
          }
        },
        "required" : [ "voiceId", "output", "script", "avatarId" ]
      },
      "GenerateAvatarUsingAudioFile" : {
        "title": "Generate Avatar Using Audio File",
        "type" : "object",
        "properties" : {
          "audio" : {
            "type" : "object",
            "properties" : {
              "source" : {
                "$ref" : "#/components/schemas/URLObject"
              },
              "mediaType" : {
                "type" : "string",
                "enum" : [ "audio/wav", "audio/x-wav", "audio/aac" ]
              },
              "localeCode" : {
                "$ref" : "#/components/schemas/SupportedLanguageCode"
              }
            },
            "required" : [ "localeCode", "mediaType", "source" ]
          },
          "avatarId" : {
            "type" : "string",
            "description": "ID of the avatar to use from the catalog of avatars."
          },
          "output" : {
            "$ref" : "#/components/schemas/AvatarOutputObject"
          }
        },
        "required" : [ "output", "audio", "avatarId" ]
      },
      "URLSource" : {
        "type" : "object",
        "properties" : {
          "source" : {
            "type" : "object",
            "properties" : {
              "url" : {
                "type" : "string",
                "format" : "uri",
                "description" : "The pre-signed URL pointing to the resource to be used for avatar/speech generation."
              }
            }
          }
        }
      },
      "URLObject" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "format" : "uri",
            "description" : "The pre-signed URL pointing to the resource to be used for avatar/speech generation."
          }
        }
      },
      "AvatarOutputObject" : {
        "type" : "object",
        "properties" : {
          "mediaType" : {
            "$ref" : "#/components/schemas/SupportedOutputVideoFormat"
          },
          "background" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/OutputColor"
            }, {
              "$ref" : "#/components/schemas/URLSource"
            } ],
            "type" : "object",
            "properties" : {
              "type" : {
                "$ref" : "#/components/schemas/SupportedBackgroundType"
              }
            }
          },
          "resolution" : {
            "type" : "object",
            "properties" : {
              "width" : {
                "type" : "string"
              },
              "height" : {
                "type" : "string"
              }
            }
          }
        },
        "required" : [ "mediaType" ]
      },
      "TextSource" : {
        "description": "Details of the text resource.",
        "type" : "string",
        "properties" : {
          "text" : {
            "type" : "string"
          }
        }
      },
      "OutputColor" : {
        "type" : "string",
        "properties" : {
          "color" : {
            "type" : "string",
            "pattern" : "^#[0-9a-fA-F]{6}$",
            "description" : "For color as background of output, it should be six digit hexadecimal value"
          }
        }
      },
      "SubmitAPIResponse" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "type" : "string"
          },
          "statusUrl" : {
            "type" : "string"
          }
        }
      },
      "StatusAPIResponse" : {
        "type" : "object",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/StatusAPIInprogressResponse"
        }, {
          "$ref" : "#/components/schemas/StatusAPICompletedResponse"
        } ]
      },
      "StatusAPIInprogressResponse" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "StatusAPICompletedResponse" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "output" : {
            "type" : "object",
            "properties" : {
              "url" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "FailedResponse" : {
        "type" : "object",
        "properties" : {
          "error_code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    },
    "examples": {
      "SuccessfulVoicesResponse": {
        "summary": "Successful response with voices details",
        "value": {
          "voices": [{
            "voiceId": "v123",
            "displayName": "John Doe",
            "gender": "M",
            "style": "Professional",
            "voiceType": "Nurse",
            "status": "Active",
            "extendedPropertyMap": {},
            "wordsPerMinute": "100",
            "rolePlayList": [],
            "sampleURL": "<pre-signed url for downloading the sample audio>"
          }]
        }
      },
      "SuccessfulAvatarsResponse": {
        "summary": "Successful response with avatars details",
        "value": {
          "avatars": [{
            "avatarId": "a321",
            "displayName": "Alice",
            "gender": "F",
            "clothingStyle": "Formal",
            "ageGroup": "Young Adult",
            "ethnicity": "Caucasian",
            "status": "Active",
            "style": "Doctor",
            "extendedPropertyMap": {},
            "thumbnailUrls": {
              "hd": "<pre-signed url for downloading HD avatar thumbnail>",
              "lowRes": "<pre-signed url for downloading low resolution avatar thumbnail>"
            },
            "voiceId": "v321",
            "sampleVideo":  {
              "webm": "<pre-signed url for downloading the avatar sample video in WEBM format>",
              "mp4": "<pre-signed url for downloading the avatar sample video in MP4 format>"
            }
          }
          ]
        }
      },
      "ErrorBodyMethodNotAllowed": {
        "summary": "Error Body Method Not Allowed",
        "value": {
          "error_code": "405001",
          "message": "The requested method is not allowed on this endpoint."
        }
      },
      "ErrorBodyForbidden": {
        "summary": "Example of a forbidden error",
        "value": {
          "error_code": "access_error",
          "message": "Token not allowed in the current context"
        }
      },
      "RunTimeErrorInStudio": {
        "value": {
          "error_code": "runtime_error",
          "message": "Error while fetching available entities"
        }
      },
      "SubmitRequestResponse" : {
        "summary" : "Successful response with job details",
        "value" : {
          "jobId" : "string",
          "statusUrl" : "string"
        }
      },
      "StatusApiInProgressRequestResponse" : {
        "summary" : "Inprogress response with job details",
        "value" : {
          "jobId" : "string",
          "status" : "string"
        }
      },
      "StatusApiSuccessRequestResponse" : {
        "summary" : "Success response with job details",
        "value" : {
          "jobId" : "string",
          "status" : "string",
          "output" : {
            "url" : "string"
          }
        }
      },
      "TextInputForSpeechGeneration" : {
        "summary" : "Generate speech using plain text",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "output" : {
            "mediaType" : "audio/wav"
          }
        }
      },
      "URLInputForSpeechGeneration" : {
        "summary" : "Generate speech using text file",
        "value" : {
          "script" : {
            "source" : {
              "url" : "<pre-signed url of text file>"
            },
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "output" : {
            "mediaType" : "audio/wav"
          }
        }
      },
      "PlainTextInputForAvatarGeneration" : {
        "summary" : "Generate avatar using plain text",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4"
          }
        }
      },
      "PlainTextInputForAvatarGenerationUsingVideoBackground" : {
        "summary" : "Generate avatar using plain text and video background",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4",
            "background" : {
              "type" : "video",
              "source" : {
                "url" : "<pre-signed url of background video>"
              }
            }
          }
        }
      },
      "PlainTextInputForAvatarGenerationUsingImageBackground" : {
        "summary" : "Generate avatar using plain text and image background",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4",
            "background" : {
              "type" : "image",
              "source" : {
                "url" : "<pre-signed url of background image>"
              }
            }
          }
        }
      },
      "PlainTextInputForAvatarGenerationUsingColorBackground" : {
        "summary" : "Generate avatar using plain text and color background",
        "value" : {
          "script" : {
            "text" : "<plain text>",
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4",
            "background" : {
              "type" : "color",
              "color": "#FFF000"
            }
          }
        }
      },
      "URLTextInputForAvatarGeneration" : {
        "summary" : "Generate avatar using text file",
        "value" : {
          "script" : {
            "source" : {
              "url" : "<pre-signed url of text file>"
            },
            "mediaType" : "text/plain",
            "localeCode" : "en-US"
          },
          "voiceId" : "<voice id>",
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4"
          }
        }
      },
      "URLInputForAvatarGeneration" : {
        "summary" : "Generate avatar using audio file",
        "value" : {
          "audio" : {
            "source" : {
              "url" : "<pre-signed url of input audio>"
            },
            "mediaType" : "audio/wav",
            "localeCode" : "en-US"
          },
          "avatarId" : "<avatar id>",
          "output" : {
            "mediaType" : "video/mp4"
          }
        }
      },
      "BadRequestError": {
        "summary" : "Bad Request",
        "value" : {
          "error_code" : "invalid_json",
          "message" : "Invalid request. Please check the input data."
        }
      },
      "UnauthorizedAccessError" : {
        "summary" : "Invalid token",
        "value" : {
          "error_code" : 401013,
          "message" : "Oauth token is not valid"
        }
      },
      "ErrorBodyResourceNotFound" : {
        "summary" : "Example of a resource not found error",
        "value" : {
          "error_code" : "unknown_job_id",
          "message" : "The requested resource was not found."
        }
      },
      "ErrorBodyTooManyRequests" : {
        "summary" : "Example of a too many requests error",
        "value" : {
          "error_code" : "429011",
          "message" : "Too Many Requests"
        }
      },
      "InputFileTypeValidationErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Input file format is not supported"
        }
      },
      "InvalidTextForScriptErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "The provided 'text' is empty"
        }
      },
      "InvalidOrMissingLocaleCodeForScriptErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid source locale code specified"
        }
      },
      "InvalidMediaTypeURLErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Provided input mediaType should match the type of source media"
        }
      },
      "UnsupportedOutputResolution" :{
        "value" : {
          "error_code": "validation_error",
          "message": "Unsupported resolution specified in output. Accepted values are [1920x1080, 3840x2160]"
        }
      },
      "ScriptInvalidASCIIRange" : {
        "value": {
          "error_code":"validation_error",
          "message": "Input contains unsupported characters. Please use only ASCII or extended ASCII."
        }
      },
      "BackgroundIncompatibleWithFormat" : {
        "value": {
          "error_code":"validation_error",
          "message": "Transparent background is only supported for 'video/webm' output file format"
        }
      },
      "FormatIncompatibleWithBackground" : {
        "value": {
          "error_code":"validation_error",
          "message": "The 'video/webm' output format can only be used when the background type is 'transparent'"
        }
      },
      "MediatypeIncomatibleForText" : {
        "value": {
          "error_code":"validation_error",
          "message": "Provided text format is not valid for input mediaType."
        }
      },
      "ScriptInvalidTextSupportedRange" : {
        "value": {
          "error_code":"validation_error",
          "message": "Input contains unsupported characters. Please remove any Emojis or Symbols."
        }
      },
      "ScriptPromptUnsafe": {
        "value": {
          "error_code":"validation_error",
          "message": "The provided prompt is considered unsafe and it cannot be used to generate content."
        }
      },
      "UnknownJobId" : {
        "value": {
          "error_code":"unknown_job_id",
          "message": "The requested resource %s was not found."
        }
      },
      "ErrorDownloadingFileFromURLErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Failed to download input file"
        }
      },
      "CharacterLimitExceededErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Input text has more than 7500 characters"
        }
      },
      "IncorrectOutputConfigForAvatarInputErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Output file format is not valid"
        }
      },
      "UserBKSFailedErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Unauthorised authorization request"
        }
      },
      "BothScriptAndAudioProvidedErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Must specify either script or audio, not both"
        }
      },
      "AudioFieldMissingURLErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid or missing 'url' specified in audio"
        }
      },
      "TextOrURLMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Provide non-empty text in 'script' or a valid URL in 'source'"
        }
      },
      "BothScriptAndAudioMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Must specify either script or audio, both cannot be empty"
        }
      },
      "SourceNotPresentForScriptOrAudioErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Missing 'source' field"
        }
      },
      "UnsupportedShotTypeErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Shot Type is not supported."
        }
      },
      "MissingOutputConfigErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Missing 'output' field in the payload"
        }
      },
      "UnsupportedVoiceIdErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "The requested 'voiceId' is not supported"
        }
      },
      "MissingVoiceIdErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Missing 'voiceId' in the payload"
        }
      },
      "InvalidTextFileURLErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid media 'url' for script"
        }
      },
      "BackgroundUrlMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Background URL must be specified for type 'video' or 'image'"
        }
      },
      "IncorrectBackgroundUrlErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Error while downloading file from Background URL"
        }
      },
      "UnsupportedFileTypeForVideoBackgroundErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Unsupported file type for background"
        }
      },
      "BackgroundTypeMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Background type must be set to 'image', 'video' or 'color'"
        }
      },
      "AvatarIdMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "The 'avatarId' property is required"
        }
      },
      "InvalidBackgroundUrlErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid 'url' specified in background"
        }
      },
      "BackgroundAssetResolutionErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Background asset resolution should match output background resolution (with default value 1920x1080)"
        }
      },
      "UnsupportedAvatarIdErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "The requested 'AvatarId' is not supported"
        }
      },
      "BackgroundVideoShouldHaveAudioErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Background video should have audio"
        }
      },
      "DurationMoreThanSupportedErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Audio duration should be less than 30 mins"
        }
      },
      "ScriptMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Script missing in the payload"
        }
      },
      "InputMediaTypeMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Missing script 'mediaType' in the payload"
        }
      },
      "IncorrectInputJsonErrorExample" : {
        "value" : {
          "error_code" : "invalid_json",
          "message" : "Please check the input json."
        }
      },
      "OutputMediaTypeMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Missing output 'mediaType' in payload"
        }
      },
      "FileUrlMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Missing input file URL"
        }
      },
      "SourceLocaleMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Source locale missing in payload"
        }
      },
      "AudioSourceMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Audio source missing in payload"
        }
      },
      "AudioSourceUrlMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Audio source url missing in payload"
        }
      },
      "BothSourceUrlAndTextPresentErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Both source url and source text is present in the request"
        }
      },
      "InvalidRequestPayloadErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Text to speech service marked this request as invalid"
        }
      },
      "BothBackgroundSourceUrlAndColorPresentErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Must specify either background source or color, not both"
        }
      },
      "MissingBothBackgroundAndColorErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Must specify either background source or color, both cannot be empty"
        }
      },
      "InvalidBackgroundColorErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid 'color' specified in background"
        }
      },
      "BackgroundColorMissingErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Background color must be specified for type 'color'"
        }
      },
      "InvalidInputSourceUrlErrorExample" : {
        "value" : {
          "error_code" : "validation_error",
          "message" : "Invalid input 'url' specified"
        }
      },
      "RunTimeErrorInAvatarExample" : {
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Run time error in avatar"
        }
      },
      "ValidationFailureInLipsyncPipelineExample" : {
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Validation failure in Lipsync Pipeline"
        }
      },
      "FailedInFFmpegWorkerExample" : {
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Failed in FFmpeg worker"
        }
      },
      "FailedWhilePollingForLipsyncExample" : {
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Failed while polling for Lipsync"
        }
      },
      "ErrorWhileTrimmingAvatarVideoExample" : {
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Error while triming avatar video"
        }
      },
      "ErrorWhileTrimmingAvatarAlphaVideoExample" : {
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Error while triming avatar alpha video"
        }
      },
      "ErrorWhileDownloadingActorConfigFileFromS3Example" : {
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Error while downloading actor config file"
        }
      },
      "CAISigningFailed" : {
        "summary" : "Example of a CAI signing failure",
        "value" : {
          "error_code" : "runtime_error",
          "message" : "CAI Signing Failed"
        }
      },
      "UnableToUploadOutput" : {
        "summary" : "Example of an upload failure for output",
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Unable to upload the output"
        }
      },
      "RunTimeErrorInTTS" : {
        "summary" : "Example of a runtime error in TTS",
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Run time error in tts"
        }
      },
      "UnableToDownloadStockMedia" : {
        "summary" : "Example of a failure to download stock media",
        "value" : {
          "error_code" : "runtime_error",
          "message" : "Unable to download stock media"
        }
      },
      "TTSRuntimeError": {
        "value" : {
          "error_code": "runtime_error",
          "message": "Internal Server Error while receiving or handling response"
        }
      },
      "TTSEntityCreationError": {
        "value" : {
          "error_code": "runtime_error",
          "message": "Internal Server Error while creating text to speech request"
        }
      },
      "TTSServiceSubmitError": {
        "value" : {
          "error_code": "runtime_error",
          "message": "Internal Server Error while submitting text to speech request"
        }
      },
      "TTSStatusError": {
        "value" : {
          "error_code": "runtime_error",
          "message": "Internal Server Error while getting text to speech request status"}
      }
    }
  }
}
